{"version":3,"sources":["functions/getCountries.js","components/SearchForm.js","components/ErrorBox.js","components/SearchResults.js","components/StatisticsBox.js","App.js","index.js"],"names":["HOST","process","searchType","searchString","a","countries","error","fetch","method","mode","headers","body","JSON","stringify","rawResponse","json","response","country","region","subregion","getCountries","SearchForm","props","useState","setSearchType","setSearchString","handleChange","e","target","name","value","onSubmit","preventDefault","searchSubmit","type","onChange","id","checked","className","role","aria-label","ErrorBox","SearchResults","map","c","i","key","alpha2Code","alpha3Code","population","toLocaleString","languages","l","reduce","alt","src","flag","StatisticsBox","countryCount","regionCount","subregionCount","Object","values","forEach","keys","includes","computeStatistics","entries","count","App","setCountries","setError","handleSearchSubmit","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.956e2874.chunk.js","sourcesContent":["// Host is different in development vs. production environments\nconst HOST = process.env.REACT_APP_HOST_PREFIX;\n\n// Function to call backend service to get country list\nasync function getCountries(searchType, searchString) {\n  // Instantiate return variables\n  let countries = [];\n  let error = null;\n\n  // Call backend service\n  const rawResponse = await fetch(`${HOST}/api/index.php`, {\n    method: \"post\",\n    mode: \"cors\",\n    headers: { \"Content-Type\": \"text/plain\" },\n    body: JSON.stringify({ searchType, searchString }),\n  });\n  // (Parse JSON response)\n  const response = await rawResponse.json();\n\n  // Check for errors in response\n  if (response[\"result\"] !== \"success\") {\n    error = response[\"result\"];\n    return { error, countries };\n  }\n\n  // Save resulting data as countries\n  countries = response[\"data\"];\n\n  // Modify results in-place to replace empty strings with \"(None)\"\n  for (const country of countries) {\n    country.region = country.region === \"\" ? \"(None)\" : country.region;\n    country.subregion = country.subregion === \"\" ? \"(None)\" : country.subregion;\n  }\n\n  return { error, countries };\n}\n\nexport default getCountries;\n","import React, { Fragment, useState } from \"react\";\n\nfunction SearchForm(props) {\n  const [searchType, setSearchType] = useState(\"country-name\");\n  const [searchString, setSearchString] = useState(\"\");\n\n  const handleChange = (e) => {\n    // Whenever the user changes the search form parameters, update the component state to reflect those changes\n    const { name, value } = e.target;\n    if (name === \"searchString\") {\n      setSearchString(value);\n    }\n    if (name === \"searchType\") {\n      setSearchType(value);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    // (Prevent default HTML form submission behavior for One-Page Application)\n    e.preventDefault();\n\n    // Pass values up and trigger search submission in parent component\n    props.searchSubmit(searchType, searchString);\n  };\n\n  return (\n    <Fragment>\n      <h2>Search Form</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={searchString}\n          name=\"searchString\"\n          onChange={handleChange}\n        />\n        <div id=\"search-type-selection\">\n          <div>\n            <input\n              type=\"radio\"\n              value=\"country-name\"\n              name=\"searchType\"\n              onChange={handleChange}\n              checked={searchType === \"country-name\"}\n            />\n            <label>Country name</label>\n          </div>\n          <div>\n            <input\n              type=\"radio\"\n              value=\"full-name\"\n              name=\"searchType\"\n              onChange={handleChange}\n              checked={searchType === \"full-name\"}\n            />\n            <label>Full name</label>\n          </div>{\" \"}\n          <div>\n            <input\n              type=\"radio\"\n              value=\"country-code\"\n              name=\"searchType\"\n              onChange={handleChange}\n              checked={searchType === \"country-code\"}\n            />\n            <label>Country code</label>\n          </div>\n        </div>\n        <button type=\"submit\">\n          <span className=\"emoji\" role=\"img\" aria-label=\"globe\">\n            üåç\n          </span>\n          Search\n        </button>\n      </form>\n    </Fragment>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction ErrorBox({ error }) {\n  return (\n    <div className=\"error-box\">\n      {error === \"errorEmptySearch\" && (\n        <div>\n          <p>It looks like you've left the search box empty!</p>\n        </div>\n      )}\n      {error === \"errorNoResults\" && (\n        <div>\n          <p>\n            Unfortunately, while your search was successfully completed, it\n            didn't return any results. Try fixing the spelling or typing\n            something else.\n          </p>\n          <p>\n            If you're still having trouble, perhaps go for a walk outside. I\n            know it often helps me.\n          </p>\n        </div>\n      )}\n      {error === \"errorServerError\" && (\n        <div>\n          <p>\n            Hmm... the external API returned a 400 error. Most likely no results\n            were found; try modifying your search terms and try again.\n          </p>\n        </div>\n      )}\n      {error === \"errorUnknownError\" && (\n        <div>\n          <p>\n            Oh boy. We've received some unknown error. Go find the person who\n            wrote this program and tell them!\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ErrorBox;\n","import React, { Fragment } from \"react\";\n\nfunction SearchResults({ countries }) {\n  return (\n    <Fragment>\n      <h2>Search Results</h2>\n      <div id=\"search-results\">\n        <div className=\"heading\">Name</div>\n        <div className=\"heading\">Alpha Code 2</div>\n        <div className=\"heading\">Alpha Code 3</div>\n        <div className=\"heading\">Region</div>\n        <div className=\"heading\">Subregion</div>\n        <div className=\"heading\">Population</div>\n        <div className=\"heading\">Languages</div>\n        <div className=\"heading\">Flag</div>\n        {countries.map((c, i) => {\n          return (\n            <Fragment key={i}>\n              <div>{c.name}</div>\n              <div>{c.alpha2Code}</div>\n              <div>{c.alpha3Code}</div>\n              <div>{c.region}</div>\n              <div>{c.subregion}</div>\n              <div>{c.population.toLocaleString()}</div>\n              <div>\n                {c.languages\n                  .map((l) => l.name)\n                  .reduce((a, c) => {\n                    return `${a}, ${c}`;\n                  })}\n              </div>\n              <div>\n                <img className=\"flag\" alt=\"flag\" src={c.flag} />\n              </div>\n            </Fragment>\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default SearchResults;\n","import React, { Fragment } from \"react\";\n\nfunction computeStatistics(countries) {\n  // Instantiate variables\n  let countryCount = 0;\n  let regionCount = {};\n  let subregionCount = {};\n\n  Object.values(countries).forEach((c) => {\n    // countryCount\n    countryCount += 1;\n\n    // regionCount\n    if (Object.keys(regionCount).includes(c.region)) {\n      regionCount[c.region] = regionCount[c.region] + 1;\n    } else {\n      regionCount[c.region] = 1;\n    }\n\n    // subregionCount\n    if (Object.keys(subregionCount).includes(c.subregion)) {\n      subregionCount[c.subregion] = subregionCount[c.subregion] + 1;\n    } else {\n      subregionCount[c.subregion] = 1;\n    }\n  });\n\n  return { countryCount, regionCount, subregionCount };\n}\n\nfunction StatisticsBox({ countries }) {\n  const { countryCount, regionCount, subregionCount } = computeStatistics(\n    countries\n  );\n\n  return (\n    <Fragment>\n      <h2>Statistics</h2>\n      <div id=\"statistics-box\">\n        <div>Country count:</div>\n        <div>{countryCount}</div>\n        <div>Region count:</div>\n        <div>\n          {Object.entries(regionCount).map(([name, count], i) => {\n            return (\n              <span className=\"region\" key={i}>\n                {name}: {count}\n              </span>\n            );\n          })}\n        </div>\n        <div>Subregion count:</div>\n        <div>\n          {Object.entries(subregionCount).map(([name, count], i) => {\n            return (\n              <span className=\"subregion\" key={i}>\n                {name}: {count}\n              </span>\n            );\n          })}\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default StatisticsBox;\n","import React, { Fragment, useState } from \"react\";\n\nimport getCountries from \"./functions/getCountries\";\nimport SearchForm from \"./components/SearchForm\";\nimport ErrorBox from \"./components/ErrorBox\";\nimport SearchResults from \"./components/SearchResults\";\nimport StatisticsBox from \"./components/StatisticsBox\";\nimport \"./css/main.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  const handleSearchSubmit = async (searchType, searchString) => {\n    // Call backend service to get country list\n    const { error, countries } = await getCountries(searchType, searchString);\n\n    // Update component state with results\n    setError(error);\n    setCountries(countries);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Country Search</h1>\n      <SearchForm searchSubmit={handleSearchSubmit} />\n      {error && <ErrorBox error={error} />}\n      {countries.length > 0 && (\n        <Fragment>\n          <SearchResults countries={countries} />\n          <StatisticsBox countries={countries} />\n        </Fragment>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}